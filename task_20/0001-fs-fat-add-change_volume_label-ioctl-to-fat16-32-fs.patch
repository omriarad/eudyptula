From 9616be85e1b58ee9ab6c0647efca346dee2f5cd4 Mon Sep 17 00:00:00 2001
From: Omri Arad <omriarad3@gmail.com>
Date: Sat, 15 Apr 2017 16:26:49 +0300
Subject: [PATCH] fs: fat: add change_volume_label ioctl to fat16/32 fs

Signed-off-by: Omri Arad <omriarad3@gmail.com>
---
 fs/fat/file.c                 | 37 +++++++++++++++++++++++++++++++++++++
 include/uapi/linux/msdos_fs.h |  1 +
 2 files changed, 38 insertions(+)

diff --git a/fs/fat/file.c b/fs/fat/file.c
index 3d04b12..f911d3e 100644
--- a/fs/fat/file.c
+++ b/fs/fat/file.c
@@ -121,6 +121,41 @@ static int fat_ioctl_get_volume_id(struct inode *inode, u32 __user *user_attr)
 	return put_user(sbi->vol_id, user_attr);
 }
 
+static int fat_ioctl_set_volume_label(struct inode *dir, unsigned long arg)
+{
+	unsigned char new_label[MSDOS_NAME];
+	struct super_block *sb = dir->i_sb;
+	struct msdos_sb_info *sbi = MSDOS_SB(sb);
+	struct buffer_head *bh, *bh32;
+	struct fat_boot_sector *b, *b32;
+
+	if (copy_from_user(new_label, (unsigned char *)arg, MSDOS_NAME))
+		return -EFAULT;
+	if ((sb->s_flags & MS_RDONLY) || (sbi->dirty))
+		return -ENOTTY;
+	bh = sb_bread(sb, 0);
+	if (bh == NULL)
+		return -ENOTTY;
+	b = (struct fat_boot_sector *) bh->b_data;
+	if (sbi->fat_bits == 32) {
+		memcpy(b->fat32.vol_label, new_label, MSDOS_NAME);
+		bh32 = sb_bread(sb, b->fat32.backup_boot);
+		if (bh32) {
+			b32 = (struct fat_boot_sector *) bh32->b_data;
+			memcpy(b32->fat32.vol_label, new_label, MSDOS_NAME);
+			mark_buffer_dirty(bh32);
+			sync_dirty_buffer(bh32);
+			brelse(bh32);
+		}
+	} else {
+		memcpy(b->fat16.vol_label, new_label, MSDOS_NAME);
+	}
+	mark_buffer_dirty(bh);
+	sync_dirty_buffer(bh);
+	brelse(bh);
+	return 0;
+}
+
 long fat_generic_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
 {
 	struct inode *inode = file_inode(filp);
@@ -133,6 +168,8 @@ long fat_generic_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
 		return fat_ioctl_set_attributes(filp, user_attr);
 	case FAT_IOCTL_GET_VOLUME_ID:
 		return fat_ioctl_get_volume_id(inode, user_attr);
+	case FAT_IOCTL_SET_VOLUME_LABEL:
+		return fat_ioctl_set_volume_label(inode, arg);
 	default:
 		return -ENOTTY;	/* Inappropriate ioctl for device */
 	}
diff --git a/include/uapi/linux/msdos_fs.h b/include/uapi/linux/msdos_fs.h
index e956704..aa3c7dc 100644
--- a/include/uapi/linux/msdos_fs.h
+++ b/include/uapi/linux/msdos_fs.h
@@ -106,6 +106,7 @@ struct __fat_dirent {
 #define FAT_IOCTL_SET_ATTRIBUTES	_IOW('r', 0x11, __u32)
 /*Android kernel has used 0x12, so we use 0x13*/
 #define FAT_IOCTL_GET_VOLUME_ID		_IOR('r', 0x13, __u32)
+#define FAT_IOCTL_SET_VOLUME_LABEL	_IOW('r', 0x14, __u32)
 
 struct fat_boot_sector {
 	__u8	ignored[3];	/* Boot strap short or near jump */
-- 
2.7.4

